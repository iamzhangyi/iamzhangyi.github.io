<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张逸说</title>
  
  <subtitle>出口成张，逸派胡言</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhangyi.xyz/"/>
  <updated>2021-10-16T13:20:24.709Z</updated>
  <id>http://zhangyi.xyz/</id>
  
  <author>
    <name>张逸</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>验证限界上下文的原则</title>
    <link href="http://zhangyi.xyz/the-principles-of-bounded-context/"/>
    <id>http://zhangyi.xyz/the-principles-of-bounded-context/</id>
    <published>2021-10-16T13:12:51.000Z</published>
    <updated>2021-10-16T13:20:24.709Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在获得了限界上下文之后，还应该遵循限界上下文的验证原则对边界的合理性进行验证。&lt;/p&gt;
&lt;h3 id=&quot;正交原则&quot;&gt;&lt;a href=&quot;#正交原则&quot; class=&quot;headerlink&quot; title=&quot;正交原则&quot;&gt;&lt;/a&gt;正交原则&lt;/h3&gt;&lt;p&gt;正交性要求：“如果两个或更多事物中的一个发生变化，不会影响其他事物，这些事物就是正交的。”变化的影响主要体现在变化的传递性，即一个事物的变化会传递到另一个事物引起它的变化，但这个变化影响并不包含彼此正交的点。例如，限界上下文之间存在调用关系，当被调用的限界上下文公开的接口发生变化，自然会影响调用方。这一影响是合理的，也是软件设计很难避免的依赖。故而限界上下文存在正交性，指的是各自边界封装的业务知识不存在变化的传递性。&lt;/p&gt;
    
    </summary>
    
      <category term="DDD" scheme="http://zhangyi.xyz/categories/DDD/"/>
    
    
      <category term="DDD" scheme="http://zhangyi.xyz/tags/DDD/"/>
    
      <category term="Writing" scheme="http://zhangyi.xyz/tags/Writing/"/>
    
      <category term="Design" scheme="http://zhangyi.xyz/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>领域驱动设计对依赖的控制</title>
    <link href="http://zhangyi.xyz/control-dependencies-in-DDD/"/>
    <id>http://zhangyi.xyz/control-dependencies-in-DDD/</id>
    <published>2021-09-19T02:22:00.000Z</published>
    <updated>2021-09-19T04:23:01.814Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我在《解构领域驱动设计》一书中分析了软件复杂度的成因，一曰规模，一曰结构，还有一个则是变化的影响。规模与结构存在一定的矛盾关系：解决规模复杂度的有效方法为“分而治之”，一旦系统被分解为多个更为细小的软件元素，结构复杂度就会增加。结构与变化之间存在互相影响的关系：如果结构控制不合理，变化带来的影响就会更强，使得系统更加复杂。&lt;/p&gt;
&lt;p&gt;认真分析结构和变化对系统复杂度的影响，一个关键是&lt;strong&gt;对依赖的控制&lt;/strong&gt;。当我们对系统进行分解时，&lt;strong&gt;依赖&lt;/strong&gt;会成为我们无法绕开的问题，它是技术债的重要组成部分，是不可避免的。如果没有控制好依赖，系统的架构就会随着时间的推移不可避免地腐化下去，如人不可避免的老去。&lt;/p&gt;
&lt;p&gt;要合理控制依赖，只有两个可行的思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从多到少：减少依赖而非彻底消除依赖，其核心原理是做好职责的合理分配&lt;/li&gt;
&lt;li&gt;从强到弱：如果依赖不可避免，则要想办法降低依赖，其核心原理是封装与抽象&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="DDDD" scheme="http://zhangyi.xyz/categories/DDDD/"/>
    
    
      <category term="DDD" scheme="http://zhangyi.xyz/tags/DDD/"/>
    
      <category term="Architecture" scheme="http://zhangyi.xyz/tags/Architecture/"/>
    
      <category term="Design" scheme="http://zhangyi.xyz/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>《解构领域驱动设计》第二章</title>
    <link href="http://zhangyi.xyz/chapter-2-of-ddde/"/>
    <id>http://zhangyi.xyz/chapter-2-of-ddde/</id>
    <published>2021-09-08T08:11:35.000Z</published>
    <updated>2021-09-08T08:53:04.230Z</updated>
    
    <summary type="html">
    
      &lt;img src=&quot;/chapter-2-of-ddde/ddde-cover.jpg&quot; class=&quot;&quot;&gt;

&lt;p&gt;购买《解构领域驱动设计》，请扫描上图二维码在京东购买。&lt;/p&gt;
&lt;p&gt;软件的核心是其为用户解决领域相关的问题的能力。 所有其他特性，不管有多么重要，都要服务于这个基本目的。&lt;/p&gt;
&lt;p&gt;——Eric Evans，《领域驱动设计》&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;应对复杂度的挑战，或许是构建软件的过程中唯一亘古不变的主题。为了更好地应对软件复杂度，许多顶尖的软件设计人员与开发人员纷纷结合实践提出自己的真知灼见，既包括编程思想、设计原则、模式语言、过程方法和管理理论，又包括对编程利器自身的打磨。毫无疑问，通过这些真知灼见，软件领域的先行者已经改变或正在改变我们构建软件的方法、过程和目标，我们欣喜地看到了软件的构建正在向着好的方向改变。然而，整个客观世界的所有现象都存在诸如黑与白、阴与阳、亮与暗的相对性，任何技术的发展都不是单向的。随着技术日新月异向前发展，软件系统的复杂度也日益增长。中国有一句古谚：“道高一尺，魔高一丈。”又有谚语：“魔高一尺，道高一丈。”究竟是道高还是魔高，就看你是站在“道”的一方，还是“魔”的一方。&lt;/p&gt;
&lt;p&gt;在构建软件的场景中，软件复杂度显然就是“魔”，控制软件复杂度的方法则是“道”。在软件构建领域，“道”虽非虚无缥缈的玄幻叙述，却也不是绑定在具象之上的具体手段。软件复杂度的应对之道提供了一些基本法则，这些基本法则可以说放之四海而皆准，其中一条基本法则就是：能够控制软件复杂度的，只能是设计（指广泛意义上的设计）方法。因为我们无法改变客观存在的问题空间（参见2.1.2节对问题空间和解空间的阐释），却可以改变设计的质量，让好的设计为控制复杂度创造更多的机会。如果我们将软件系统限制在业务软件系统之上，又可得到另外一条基本法则：“要想克服”（业务系统的）复杂度，就需要非常严格地使用领域逻辑设计方法。在近20年的时间内，一种有效的领域逻辑设计方法就是Eric Evans提出的&lt;strong&gt;领域驱动设计&lt;/strong&gt;（domain-driven design）。&lt;/p&gt;
    
    </summary>
    
      <category term="Writing" scheme="http://zhangyi.xyz/categories/Writing/"/>
    
    
      <category term="DDD" scheme="http://zhangyi.xyz/tags/DDD/"/>
    
      <category term="Architecture" scheme="http://zhangyi.xyz/tags/Architecture/"/>
    
      <category term="Design" scheme="http://zhangyi.xyz/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>《解构领域驱动设计》第一章</title>
    <link href="http://zhangyi.xyz/chapter-1-of-ddde/"/>
    <id>http://zhangyi.xyz/chapter-1-of-ddde/</id>
    <published>2021-08-23T02:15:02.000Z</published>
    <updated>2021-08-23T03:06:40.096Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;计算机编程的本质就是控制复杂度。&lt;/p&gt;
&lt;p&gt;——Brian Kernighan&lt;/p&gt;
&lt;p&gt;复杂的事物中蕴含着无穷的变化，让人既沉迷其美，又深恐自己无法掌控。我们每日每时对软件的构建就在与复杂的斗争中不断前行。软件系统的复杂度让我觉得设计有趣，因为每次发现不同的问题，都会有一种让人耳目一新的滋味油然而生，仿佛开启了新的旅程，看到了不同的风景。同时，软件系统的复杂度又让我觉得设计无趣，因为要探索的空间实在太辽阔，一旦视野被风景所惑，就会迷失前进的方向，感到复杂难以掌控，从而失去构建高质量系统的信心。&lt;/p&gt;
&lt;p&gt;那么，什么是复杂系统？&lt;/p&gt;
    
    </summary>
    
      <category term="Writing" scheme="http://zhangyi.xyz/categories/Writing/"/>
    
    
      <category term="DDD" scheme="http://zhangyi.xyz/tags/DDD/"/>
    
      <category term="Architecture" scheme="http://zhangyi.xyz/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>ZenUML与服务驱动设计</title>
    <link href="http://zhangyi.xyz/service-driven-design-and-zenuml/"/>
    <id>http://zhangyi.xyz/service-driven-design-and-zenuml/</id>
    <published>2021-08-10T05:01:06.000Z</published>
    <updated>2021-08-10T06:42:21.122Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在《&lt;a href=&quot;https://item.jd.com/10035002181202.html&quot;&gt;解构领域驱动设计&lt;/a&gt;》书中的领域建模阶段，我提出了以&lt;strong&gt;业务服务&lt;/strong&gt;为核心进行设计与建模的方法——&lt;strong&gt;服务驱动设计&lt;/strong&gt;。通过该方法可以在静态的领域设计模型基础之上，以业务服务规约为基础，通过分析需求，对业务服务进行任务分解，获得以子任务构成的任务树。这棵树以业务服务为根，组合任务为枝，原子任务为叶，既体现了业务服务的执行过程，又进行了适度的封装，建立了一定的封装层次。&lt;/p&gt;
&lt;p&gt;一旦获得了子任务树，即可对树中的每一个子任务进行职责分配，根据其特点分别分配给远程服务、本地服务、领域服务、聚合、端口。它们是构成限界上下文的主要对象角色，我将其称之为“角色构造型”，可以和我提出的&lt;strong&gt;菱形对称架构&lt;/strong&gt;结合：&lt;/p&gt;
&lt;img src=&quot;/service-driven-design-and-zenuml/rsa.jpg&quot; class=&quot;&quot;&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://zhangyi.xyz/categories/Tool/"/>
    
    
      <category term="DDD" scheme="http://zhangyi.xyz/tags/DDD/"/>
    
      <category term="Tool" scheme="http://zhangyi.xyz/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>解决Flink流式任务的性能瓶颈</title>
    <link href="http://zhangyi.xyz/solution-to-performance-bottleneck/"/>
    <id>http://zhangyi.xyz/solution-to-performance-bottleneck/</id>
    <published>2021-08-08T08:21:48.000Z</published>
    <updated>2021-08-08T11:11:28.170Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;都说“过早进行性能优化是万恶之源”，我宁肯相信这是为了“矫枉过正”而出此惊人之语，更何况，现在的IT时代已与Donald Knuth的时代已有很大差异了。重点还是在于&lt;strong&gt;“过早”&lt;/strong&gt;这个词，之所以Knuth告诫我们不要过早进行性能优化，原因在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断性能是否存在问题，不能太早&lt;/li&gt;
&lt;li&gt;太早做性能优化，有可能并没有弄清楚性能瓶颈在哪里&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;/solution-to-performance-bottleneck/knuth.JPG&quot; class=&quot;&quot;&gt;

&lt;p&gt;图为Donald Knuth在斯坦福大学计算机科学William Gates大楼的办公室&lt;/p&gt;
&lt;p&gt;最近，我的团队成员正在着力于提高实时流处理任务的性能。由于客户为我们的测试环境仅提供了极度可怜的集群资源，我们需要在“螺蛳壳里做道场”，死扣性能，尽可能在方案与实现上将性能提升到极致。（顺带说，在测试时，不要奢侈地提供大量资源，反倒有可能尽早发现性能问题，从而让团队想办法解决之。）&lt;/p&gt;
    
    </summary>
    
      <category term="Architecture" scheme="http://zhangyi.xyz/categories/Architecture/"/>
    
    
      <category term="Flink" scheme="http://zhangyi.xyz/tags/Flink/"/>
    
      <category term="BigData" scheme="http://zhangyi.xyz/tags/BigData/"/>
    
      <category term="ElasticSearch" scheme="http://zhangyi.xyz/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>《解构领域驱动设计》推荐序</title>
    <link href="http://zhangyi.xyz/recommendation-of-my-book/"/>
    <id>http://zhangyi.xyz/recommendation-of-my-book/</id>
    <published>2021-08-05T14:41:49.000Z</published>
    <updated>2021-08-05T14:54:26.689Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;我的书《&lt;a href=&quot;https://www.epubit.com/bookDetails?id=UB77d68d84212a6&amp;typeName=&quot;&gt;解构领域驱动设计&lt;/a&gt;》即将由人民邮电出版社异步社区出版，目前已经可以在出版社的官网预定，很快就能够在电商平台上架开售。历时近四年的写作委实不易，当然，也离不开各位朋友的支持与帮助。正如我在本书前言中提到的“感谢京东周吉鑫、AWS高翊凯（Kim Kao）、腾讯王立与技术专家于君泽（花名“右军”）诸兄的抬爱，他们不仅拨冗为我的著作作序，也给了我许多好的建议与指点，提升了本书的整体质量。”&lt;/p&gt;
&lt;p&gt;为此，在这里我抢先发布这些朋友为本书写的推荐序，以飨读者。&lt;/p&gt;
    
    </summary>
    
      <category term="Writing" scheme="http://zhangyi.xyz/categories/Writing/"/>
    
    
      <category term="DDD" scheme="http://zhangyi.xyz/tags/DDD/"/>
    
      <category term="Writing" scheme="http://zhangyi.xyz/tags/Writing/"/>
    
  </entry>
  
  <entry>
    <title>《解构领域驱动设计》终于可以预购了</title>
    <link href="http://zhangyi.xyz/presale-of-DDDE/"/>
    <id>http://zhangyi.xyz/presale-of-DDDE/</id>
    <published>2021-08-03T09:58:24.000Z</published>
    <updated>2021-08-03T12:53:35.789Z</updated>
    
    <summary type="html">
    
      &lt;img src=&quot;/presale-of-DDDE/cover-small.jpg&quot; class=&quot;&quot;&gt;

&lt;p&gt;四年了，《解构领域驱动设计》&lt;strong&gt;终于&lt;/strong&gt;可以在异步社区的&lt;a href=&quot;https://www.epubit.com/bookDetails?id=UB77d68d84212a6&amp;typeName=%E6%90%9C%E7%B4%A2&quot;&gt;官方网站上预购&lt;/a&gt;了！这意味着，我的著作&lt;strong&gt;终于&lt;/strong&gt;出版了！有没有普天同庆的赶脚？总之，当我收到这一消息后，长长地吁了一口气……终于，终于，四年了，真不容易啊！&lt;/p&gt;
&lt;p&gt;许多次，我在给别人介绍这本著作时，总有人问我哪里可以买到，而我则尴尬地回答：嗯，这个，这个，还没有出版呢。许多次，读者圈的朋友在问这本书多久出版时，我从2020年承诺年底出版，然后推迟到4月，然后推迟到6月，最后推迟到7月，进度的delay已经让人产生抱怨了！而在许多年前，我总是说我的第一本书《&lt;a href=&quot;https://book.douban.com/subject/2058073/&quot;&gt;软件设计精要与模式&lt;/a&gt;》，言外之意，我还有第二本书，可是自从2007年出版我的第一本书，到2009年出版&lt;a href=&quot;http://product.china-pub.com/196623&quot;&gt;该书的第二版&lt;/a&gt;之后，我的第二本书终于在14年后诞生了。&lt;/p&gt;
&lt;p&gt;一些信息可以侧面证明本书写作的不容易。&lt;/p&gt;
    
    </summary>
    
      <category term="Writing" scheme="http://zhangyi.xyz/categories/Writing/"/>
    
    
      <category term="DDD" scheme="http://zhangyi.xyz/tags/DDD/"/>
    
      <category term="Writing" scheme="http://zhangyi.xyz/tags/Writing/"/>
    
  </entry>
  
  <entry>
    <title>领域驱动建模与面向对象建模的差异</title>
    <link href="http://zhangyi.xyz/the-difference-between-ddd-and-oo/"/>
    <id>http://zhangyi.xyz/the-difference-between-ddd-and-oo/</id>
    <published>2021-07-20T10:54:25.000Z</published>
    <updated>2021-07-22T04:50:27.251Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;即便采用面向对象建模范式，领域驱动设计的建模仍与面向对象建模存在较大差异，原因在于领域驱动设计引入了&lt;strong&gt;限界上下文（Bounded Context）&lt;/strong&gt;与&lt;strong&gt;聚合（Aggregate）&lt;/strong&gt;，使得建模的风景变得迥然不同。二者为领域模型引入了边界的约束，使得建模者不能随心所欲地建模，亦改变了模型的面貌。&lt;/p&gt;
&lt;p&gt;在我的《解构领域驱动设计》一书中，提炼了领域驱动设计之精髓，在于对边界的控制。其中，限界上下文与聚合是解空间边界控制中最为重要的两个要素。我们构建的领域模型必然位于限界上下文中，构成领域模型中的主力军——实体和值对象——又必然位于聚合的边界内：&lt;/p&gt;
    
    </summary>
    
      <category term="DDD" scheme="http://zhangyi.xyz/categories/DDD/"/>
    
    
      <category term="DDD" scheme="http://zhangyi.xyz/tags/DDD/"/>
    
      <category term="Design" scheme="http://zhangyi.xyz/tags/Design/"/>
    
      <category term="OO" scheme="http://zhangyi.xyz/tags/OO/"/>
    
  </entry>
  
  <entry>
    <title>识别实体与值对象的特征</title>
    <link href="http://zhangyi.xyz/how-to-identify-entity-and-value-object/"/>
    <id>http://zhangyi.xyz/how-to-identify-entity-and-value-object/</id>
    <published>2021-07-14T07:57:26.000Z</published>
    <updated>2021-07-15T03:14:24.373Z</updated>
    
    <summary type="html">
    
      &lt;img src=&quot;/how-to-identify-entity-and-value-object/cover.jpg&quot; class=&quot;&quot;&gt;

&lt;p&gt;甄别实体与值对象非常重要，正确与否会直接影响聚合的设计。&lt;/p&gt;
&lt;h3 id=&quot;聚合是边界&quot;&gt;&lt;a href=&quot;#聚合是边界&quot; class=&quot;headerlink&quot; title=&quot;聚合是边界&quot;&gt;&lt;/a&gt;聚合是边界&lt;/h3&gt;&lt;p&gt;在DDD中，聚合是实体与值对象的边界。一个聚合对外代表了一个完整的领域概念，遵循面向对象设计的基本原则，聚合内部往往由多个细小的高内聚领域概念组成。聚合内部的领域模型形成了一棵树，树的根必须是实体，可以称之为是&lt;strong&gt;聚合根（Aggregate Root）&lt;/strong&gt;，当然，也可以称之为&lt;strong&gt;根实体（Root Entity）&lt;/strong&gt;，它是聚合的唯一入口或出口。例如订单聚合定义了&lt;code&gt;Order&lt;/code&gt;根实体，它就是订单聚合的唯一代言人。&lt;/p&gt;
&lt;p&gt;在一个限界上下文的所有领域模型（实体和值对象）中，按照关系的强弱与概念的完整性，将其划分为多个聚合，就好像草原部落由一个个蒙古包构成了松散的聚居社群一般。&lt;/p&gt;
    
    </summary>
    
      <category term="DDD" scheme="http://zhangyi.xyz/categories/DDD/"/>
    
    
      <category term="DDD" scheme="http://zhangyi.xyz/tags/DDD/"/>
    
      <category term="Design" scheme="http://zhangyi.xyz/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>业务架构映射为应用架构</title>
    <link href="http://zhangyi.xyz/mapping-to-application-architecture-from-business-architecture/"/>
    <id>http://zhangyi.xyz/mapping-to-application-architecture-from-business-architecture/</id>
    <published>2021-07-08T05:09:01.000Z</published>
    <updated>2021-07-08T11:47:39.509Z</updated>
    
    <summary type="html">
    
      &lt;img src=&quot;/mapping-to-application-architecture-from-business-architecture/cover.jpg&quot; class=&quot;&quot;&gt;

&lt;p&gt;通过《&lt;a href=&quot;http://zhangyi.xyz/multi-views-of-business-architecture/&quot;&gt;多维度规划业务架构&lt;/a&gt;》，我们获得了由业务领域-业务组件-业务服务三个层次组成的业务架构。虽然是架构，但其本质仍然属于问题空间，其目的在于真实地探索问题空间，了解我们要解决什么样的问题。我们用到“分解”的方法，并非在解决问题，而是希望通过横向分层与纵向切分让问题空间变得更小，降低业务复杂度罢了。&lt;/p&gt;
&lt;p&gt;这种分解层次体现为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业务领域是对目标系统之系统范围进行划分，划分依据为价值高低&lt;/li&gt;
&lt;li&gt;业务组件是对业务领域的划分，划分依据在于业务相关性&lt;/li&gt;
&lt;li&gt;业务服务是对业务组件的划分，划分依据在于领域模型的知识语境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;领域驱动进行的业务分解，既是对问题空间的探索，又自然地暗合确定解决方案的思路。由于有清晰的边界存在，这一做法并未混淆问题空间与解空间，却天然地搭建了一种映射方法，使得我们能够以较小成本将业务架构&lt;strong&gt;映射&lt;/strong&gt;为IT架构中的应用架构。&lt;/p&gt;
    
    </summary>
    
      <category term="Architecture" scheme="http://zhangyi.xyz/categories/Architecture/"/>
    
    
      <category term="DDD" scheme="http://zhangyi.xyz/tags/DDD/"/>
    
      <category term="Architecture" scheme="http://zhangyi.xyz/tags/Architecture/"/>
    
      <category term="EA" scheme="http://zhangyi.xyz/tags/EA/"/>
    
  </entry>
  
  <entry>
    <title>Flink分布式程序的异常处理</title>
    <link href="http://zhangyi.xyz/exception-handling-in-flink/"/>
    <id>http://zhangyi.xyz/exception-handling-in-flink/</id>
    <published>2021-07-03T04:57:17.000Z</published>
    <updated>2021-08-08T08:40:45.853Z</updated>
    
    <summary type="html">
    
      &lt;img src=&quot;/exception-handling-in-flink/cover.jpg&quot; class=&quot;&quot;&gt;



&lt;p&gt;在我们的数据平台产品中，为了简化开发，对Flink做了一层封装，定义了&lt;code&gt;Job&lt;/code&gt;和&lt;code&gt;Flow&lt;/code&gt;的抽象。一个Job其实就是Flink的一个作业，每个Job可以定义多个Flow，一个Flow可以理解为是Flink的一个&lt;code&gt;DataStream&lt;/code&gt;，利用Job传递的&lt;code&gt;StreamExecutionEnvironment&lt;/code&gt;可以在Flow中添加包括&lt;code&gt;Source&lt;/code&gt;与&lt;code&gt;Sink&lt;/code&gt;的多个算子。&lt;/p&gt;
&lt;p&gt;Job与Flow之间的关系可以利用自定义的&lt;code&gt;@JobFlow&lt;/code&gt;注解进行配置，如此就可以在执行抽象的&lt;code&gt;AbstractJob&lt;/code&gt;的&lt;code&gt;run()&lt;/code&gt;方法时，利用反射获得该Job下的所有Flow，遍历执行每个Flow的&lt;code&gt;run()&lt;/code&gt;方法。在Flow的&lt;code&gt;run()&lt;/code&gt;方法中，才会真正根据&lt;code&gt;StreamExecutionEnvironment&lt;/code&gt;执行多个算子。&lt;/p&gt;
&lt;p&gt;Flink为了保证计算的稳定性，提供了不同的重启策略。例如，当我们将重启策略设置为失败率（failure-rate）时，如果执行的任务出错次数达到了失败率配置的要求，Flink的Worker节点的TaskManager就会重启。如果超过重启次数，Task Manager就会停止运行。&lt;/p&gt;
    
    </summary>
    
      <category term="Coding" scheme="http://zhangyi.xyz/categories/Coding/"/>
    
    
      <category term="Big Data" scheme="http://zhangyi.xyz/tags/Big-Data/"/>
    
      <category term="Flink" scheme="http://zhangyi.xyz/tags/Flink/"/>
    
      <category term="Coding" scheme="http://zhangyi.xyz/tags/Coding/"/>
    
  </entry>
  
  <entry>
    <title>《解构领域驱动设计》最新进展</title>
    <link href="http://zhangyi.xyz/Report-the-progress-of-DDDE/"/>
    <id>http://zhangyi.xyz/Report-the-progress-of-DDDE/</id>
    <published>2021-06-26T23:22:57.000Z</published>
    <updated>2021-06-26T23:51:52.476Z</updated>
    
    <summary type="html">
    
      &lt;img src=&quot;/Report-the-progress-of-DDDE/cover.jpg&quot; class=&quot;&quot;&gt;



&lt;p&gt;不出意外，《解构领域驱动设计》再次延期，完全符合一般软件开发的惯例。 &lt;/p&gt;
&lt;p&gt;我来汇报一下本书临近出版的一条时间线。&lt;/p&gt;
&lt;p&gt;5月31日，出版社编辑刘雅思同学告知我本书正式申领到书号，标志着本书正式发稿完毕。这个流程是必走的，否则就别想通过正规出版社出版了。之后的流程就是排版。 因为书的内容非常多，排版花费了不少时间。&lt;/p&gt;
    
    </summary>
    
      <category term="Writing" scheme="http://zhangyi.xyz/categories/Writing/"/>
    
    
      <category term="DDD" scheme="http://zhangyi.xyz/tags/DDD/"/>
    
      <category term="Writing" scheme="http://zhangyi.xyz/tags/Writing/"/>
    
  </entry>
  
  <entry>
    <title>多维度规划业务架构</title>
    <link href="http://zhangyi.xyz/multi-views-of-business-architecture/"/>
    <id>http://zhangyi.xyz/multi-views-of-business-architecture/</id>
    <published>2021-06-15T05:59:00.000Z</published>
    <updated>2021-06-16T07:58:11.802Z</updated>
    
    <summary type="html">
    
      &lt;img src=&quot;/multi-views-of-business-architecture/cover.jpg&quot; class=&quot;&quot;&gt;

&lt;p&gt;领域驱动设计的社区主流声音是划分问题空间（Problem Space）与解空间（Solution Space）。整个问题空间实际上就是团队开发的目标系统对应的领域，这实际上也是业务架构要描述的目标。领域驱动设计解决大规模问题空间的方法或模式是引入子领域（Subdomain）。&lt;/p&gt;
&lt;p&gt;根据价值高低的不同，子领域分为核心子领域、支撑子领域和通用子领域。若将其引入到业务架构，似乎可以根据价值高低建立不同的服务层，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心子领域：产品服务层，体现为子领域专用的产品服务&lt;/li&gt;
&lt;li&gt;支撑子领域：能力服务层，体现为跨子领域复用的能力服务&lt;/li&gt;
&lt;li&gt;通用子领域：基础服务层，体现为与领域无关的基础服务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同的层次代表了复用的粒度和水平。基础服务层因为与领域无关，它复用的范围更广泛，对应为业务架构中的支撑业务（支撑部门提供的职能），如财务体系、人力资源体系、行政体系、采购体系等。原则上，任何企业都需要这些支撑业务，而与企业从事的领域方向无关。引入领域驱动设计的概念，我将其纳入到通用子领域的范畴。&lt;/p&gt;
    
    </summary>
    
      <category term="Architecture" scheme="http://zhangyi.xyz/categories/Architecture/"/>
    
    
      <category term="DDD" scheme="http://zhangyi.xyz/tags/DDD/"/>
    
      <category term="Architecture" scheme="http://zhangyi.xyz/tags/Architecture/"/>
    
      <category term="EA" scheme="http://zhangyi.xyz/tags/EA/"/>
    
  </entry>
  
  <entry>
    <title>企业架构与领域驱动设计的融合</title>
    <link href="http://zhangyi.xyz/enterprise-architecture-and-ddd/"/>
    <id>http://zhangyi.xyz/enterprise-architecture-and-ddd/</id>
    <published>2021-06-06T08:35:42.000Z</published>
    <updated>2021-06-16T07:52:30.132Z</updated>
    
    <summary type="html">
    
      &lt;img src=&quot;/enterprise-architecture-and-ddd/2021-06-07.jpg&quot; class=&quot;&quot;&gt;

&lt;p&gt;DDD的作用范围主要还是针对系统级的分析、架构与设计，在更高的层面上，即将问题空间扩大到超过系统范围，变成企业或组织范围之后，DDD的模式就显得捉襟见肘了。此时，可以考虑引入企业架构的思想，尤其是业务架构的内容，给了DDD很好的补充，又或者说，将企业架构与DDD融合起来，就能真正串联起战略和战术设计了。&lt;/p&gt;
&lt;p&gt;为什么在传统企业中，DDD开始得到了许多企业的追捧？不仅仅是微服务的原因，就我个人不成熟的判断，应该是数字化转型开始倒逼着传统企业的IT部门开始接纳了DDD这一方法体系。&lt;/p&gt;
    
    </summary>
    
      <category term="Architecture" scheme="http://zhangyi.xyz/categories/Architecture/"/>
    
    
      <category term="DDD" scheme="http://zhangyi.xyz/tags/DDD/"/>
    
      <category term="EA" scheme="http://zhangyi.xyz/tags/EA/"/>
    
  </entry>
  
  <entry>
    <title>架构设计的三个原则</title>
    <link href="http://zhangyi.xyz/three-principles-of-architecture/"/>
    <id>http://zhangyi.xyz/three-principles-of-architecture/</id>
    <published>2021-05-06T11:38:23.000Z</published>
    <updated>2021-06-06T08:37:57.000Z</updated>
    
    <summary type="html">
    
      &lt;img src=&quot;/three-principles-of-architecture/2021-05-07.jpeg&quot; class=&quot;&quot;&gt;

&lt;p&gt;在进行架构设计时，我认为需要遵循如下原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一致原则&lt;/li&gt;
&lt;li&gt;简单原则&lt;/li&gt;
&lt;li&gt;演进原则&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Architecture" scheme="http://zhangyi.xyz/categories/Architecture/"/>
    
    
      <category term="Architecture" scheme="http://zhangyi.xyz/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>讨论实际项目的工厂模式</title>
    <link href="http://zhangyi.xyz/discuss-with-factory-pattern-in-real-project/"/>
    <id>http://zhangyi.xyz/discuss-with-factory-pattern-in-real-project/</id>
    <published>2021-01-20T12:12:42.000Z</published>
    <updated>2021-02-01T07:02:42.000Z</updated>
    
    <summary type="html">
    
      &lt;img src=&quot;/discuss-with-factory-pattern-in-real-project/2021-02-01.jpeg&quot; class=&quot;&quot;&gt;

&lt;p&gt;大思接了满满一杯热咖啡，正欲离去，转身时，偶然瞥见茶水间的白板画满了类图，定睛一看，感慨地说道：“蔡了，你还真是幸福啊！马大叔亲自给你讲解工厂模式。”&lt;/p&gt;
&lt;p&gt;蔡了刚刚意识到自己说错了话，还在尴尬中，赶紧说道：“是啊，是啊！”一边说着，一边还使劲地点着头，希望通过过分的礼貌来化解刚才的口不择言。&lt;/p&gt;
&lt;p&gt;成大思想到了自己过去学习设计模式的经历，悠悠地说道：“说起来，当初我学设计模式时，可没有你这么好的待遇了。”&lt;/p&gt;
&lt;p&gt;这一番话倒是勾起了蔡了的好奇心，赶紧问道：“大思，那你当时是怎么学的呢？”&lt;/p&gt;
    
    </summary>
    
      <category term="蔡了成长记" scheme="http://zhangyi.xyz/categories/%E8%94%A1%E4%BA%86%E6%88%90%E9%95%BF%E8%AE%B0/"/>
    
    
      <category term="Design, OO" scheme="http://zhangyi.xyz/tags/Design-OO/"/>
    
  </entry>
  
  <entry>
    <title>茶水间的技术问答</title>
    <link href="http://zhangyi.xyz/technical-discussion-in-tea-room/"/>
    <id>http://zhangyi.xyz/technical-discussion-in-tea-room/</id>
    <published>2021-01-06T07:09:03.000Z</published>
    <updated>2021-01-08T11:56:28.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;公司的茶水间装修得如家一般温馨，咖啡机时刻飘出咖啡的浓香。员工们常常在此休息聊天，既可以选择坐在高脚凳上依着吧台闲谈阔论，也可以舒服的躺坐在旁边的沙发上闭目养神。晨会之后的半小时，以及午餐前后是这里最喧嚣的时候，此时的茶水间却颇为安宁，大家都在工位上专心工作。&lt;/p&gt;
&lt;p&gt;两人来到茶水间，蔡了问道：“老规矩，还是拿铁，对吧？”马丁花点点头，蔡了殷勤地给他接了一杯浓浓的拿铁，然后又给自己接了一杯卡布奇诺，两人坐在沙发上继续讨论之前的话题。&lt;/p&gt;
    
    </summary>
    
      <category term="蔡了成长记" scheme="http://zhangyi.xyz/categories/%E8%94%A1%E4%BA%86%E6%88%90%E9%95%BF%E8%AE%B0/"/>
    
    
      <category term="Design, OO" scheme="http://zhangyi.xyz/tags/Design-OO/"/>
    
  </entry>
  
  <entry>
    <title>深入理解简单设计</title>
    <link href="http://zhangyi.xyz/understand-simple-design/"/>
    <id>http://zhangyi.xyz/understand-simple-design/</id>
    <published>2020-12-12T14:10:22.000Z</published>
    <updated>2020-12-12T14:43:37.000Z</updated>
    
    <summary type="html">
    
      &lt;img src=&quot;/understand-simple-design/12-13.jpeg&quot; class=&quot;&quot;&gt;

&lt;p&gt;Kent Beck提出的简单设计原则，内容为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过所有测试（Passes its tests）&lt;/li&gt;
&lt;li&gt;尽可能消除重复 (Minimizes duplication)&lt;/li&gt;
&lt;li&gt;尽可能清晰表达 (Maximizes clarity)&lt;/li&gt;
&lt;li&gt;更少代码元素 (Has fewer elements)&lt;/li&gt;
&lt;li&gt;以上四个原则的重要程度依次降低。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过所有测试原则意味着我们开发的功能满足客户的需求，这是简单设计的底线原则。该原则同时隐含地告知与客户或领域专家（需求分析师）充分沟通的重要性。&lt;/p&gt;
&lt;p&gt;尽可能消除重复原则是对代码质量提出的要求，并通过测试驱动开发的重构环节来完成。注意此原则提到的是Minimizes（尽可能消除），而非No duplication（无重复），因为追求极致的重用存在设计与编码的代价。&lt;/p&gt;
&lt;p&gt;尽可能清晰表达原则要求代码要简洁而清晰地传递领域知识，在领域驱动设计的语境下，就是要遵循统一语言，提高代码的可读性，满足业务人员与开发人员的交流目的。针对核心领域，甚至可以考虑引入领域特定语言（Domain Specific Language，DSL）来表现领域逻辑。&lt;/p&gt;
&lt;p&gt;在满足这三个原则的基础上，更少代码元素原则告诫我们遏制过度设计的贪心，做到设计的恰如其分，即在满足客户需求的基础上，只要代码已经做到了最少重复与清晰表达，就不要再进一步拆分或提取类、方法和变量。&lt;/p&gt;
&lt;p&gt;这四个原则是依次递进的，功能正确，减少重复，代码可读是简单设计的根本要求。一旦满足这些要求，就不能创建更多的代码元素去迎合未来可能并不存在的变化，避免过度设计。&lt;/p&gt;
    
    </summary>
    
      <category term="Design" scheme="http://zhangyi.xyz/categories/Design/"/>
    
    
      <category term="Design" scheme="http://zhangyi.xyz/tags/Design/"/>
    
      <category term="TDD" scheme="http://zhangyi.xyz/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>简单工厂不简单</title>
    <link href="http://zhangyi.xyz/simple-factory-is-not-simple/"/>
    <id>http://zhangyi.xyz/simple-factory-is-not-simple/</id>
    <published>2020-12-08T12:14:51.000Z</published>
    <updated>2020-12-08T14:52:27.000Z</updated>
    
    <summary type="html">
    
      &lt;img src=&quot;/simple-factory-is-not-simple/cover.jpeg&quot; class=&quot;&quot;&gt;

&lt;p&gt;马丁花背着灰色的双肩背包走进了公司写字楼，浮现在眼前的是排成长蛇状的一群上班族，正按照单双层各自分成两队等候着电梯。低楼层的童鞋等不及了，甩开双腿开始爬楼梯，就当是减肥锻炼身体了，不着急的依旧排在队伍里，低头看着手机，玩着游戏或者刷着朋友圈。手机扫去了等待的急躁与不安，一个个安静如花，只待电梯像殷勤的主人把他们一批一批接走。&lt;/p&gt;
&lt;p&gt;终于踏进了电梯，马丁花被挤到了角落里，电梯里的人互不相识，肃穆像开追悼会，只听得电梯不断发出“叮”的一声响，电子合成声开始汇报多少层到了，门打开，随着不断有人走出，空间变得逐渐开阔起来。&lt;/p&gt;
&lt;p&gt;“十八层到了！”自从新搬到这栋写字楼后，马丁花每次听到呆板而不带感情的电子合成声汇报所在楼层到达时，都忍不住翻一下白眼，心里不由脑补出“地狱”两个字眼儿。摇摇头，缓缓走出电梯。&lt;/p&gt;
&lt;p&gt;刷卡。自动门刚一打开，就瞥见一道身影正要到正前方拐角处的茶水间倒水，看见自己来了，又赶紧退了回去，似乎故意躲着马丁花。这道身影再熟悉不过，自然躲不过马丁花敏锐的法眼，赶紧叫到：“蔡了！”&lt;/p&gt;
    
    </summary>
    
      <category term="蔡了成长记" scheme="http://zhangyi.xyz/categories/%E8%94%A1%E4%BA%86%E6%88%90%E9%95%BF%E8%AE%B0/"/>
    
    
      <category term="Design, OO, Design Pattern" scheme="http://zhangyi.xyz/tags/Design-OO-Design-Pattern/"/>
    
  </entry>
  
</feed>
